/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SymPwr.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(SymPwr); 

 SymPwr::SymPwr(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _A,
                        RooAbsReal& _B,
                        RooAbsReal& _C) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   A("A","A",this,_A),
   B("B","B",this,_B),
   C("C","C",this,_C)
 { 
 } 


 SymPwr::SymPwr(const SymPwr& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   A("A",this,other.A),
   B("B",this,other.B),
   C("C",this,other.C)
 { 
 } 



 Double_t SymPwr::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
    Double_t t = TMath::Abs(x - A);

    Double_t absAlpha = TMath::Abs(B);
//    if (t >= absAlpha){
//        return TMath::Power(t, -C)*(C-1)/(2*C);
        return TMath::Exp(-t*C)/(C);
//    }

/*    if (t < absAlpha){
        return (C-1)/(2*absAlpha*C);
    }*/

 } 



